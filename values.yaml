# Default values for plex-simple.
# Override these in your own values.yaml file

# Plex is not configured to scale beyond 1, so leave this 1
replicaCount: 1

image:
  repository: plexinc/pms-docker
  pullPolicy: Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 32400

ingress:
  enabled: true
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: plex.example.com
      path: /
  tls: []
  #  - secretName: plex.example.com-tls
  #    hosts:
  #      - plex.example.com

resources: {}
  # If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

environmentVars:
# - name: PUID
#   value: "1000"
# - name: PGID
#   value: "1000"
# - name: PLEX_CLAIM
#   value: "xxx"


# Persistence
# This is designed so one could have 3 different types of storage. 
# - some highly available block storage like Longhorn (https://longhorn.io/)
# - a tempory local storage for transcoding (or use EmptyDir if left unset)
# - some other kind of long term back-end storage like NFS

# This will run an init container that will chmod and chown the persistence volumes if enabled below. 
# You will want to verify the permissions set here are OK for your NFS server if using one:
enableFixPermissions: false
fixPermissions:
  user: 1000
  group: 1000

# This is the plex database. Needs to be a block storage solution, can't use NFS
databasePersistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  ##
  # existingClaim:
  subPath: ""
  ## Set storage class manually with
  ## storageClass: <storageClass>
  ## If not set, default storageclass will be used
  accessModes:
    - ReadWriteOnce
  mountPath: /config
  size: 10Gi

# This is temp storage for transcoding. You don't want this on slow drives
transcodePersistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  ##
  # existingClaim:
  subPath: ""
  ## Set storage class manually with
  ## storageClass: <storageClass>
  ## If not set, default storageclass will be used
  accessModes:
    - ReadWriteOnce
  mountPath: /transcode
  size: 10Gi

# This is the root directory of all your media. This is ideally set up using an NFS
# (https://github.com/kubernetes/examples/tree/master/staging/volumes/nfs) PV and PVC and setting this to "existingClaim"
mediaPersistence:
  enabled: false
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  ##
  # existingClaim:
  subPath: ""
  ## Set storage class manually with
  ## storageClass: <storageClass>
  ## If not set, default storageclass will be used
  accessModes:
    - ReadWriteOnce
  mountPath: /data
  size: 10Gi